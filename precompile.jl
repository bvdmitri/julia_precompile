
__JULIA_PATH = "/usr/local/bin/julia"

bashit(str)  = run(`bash -c $str`)

function julia_precompile(code, precompile_file) 
    bashit("$__JULIA_PATH --trace-compile='$precompile_file' -e '$code'")
    return precompile_file
end

function snippet_code(snippet)
    snippet = """
    $(snippet_prefix(snippet))
    output = include(\"$(string("./snippets/", get_snippets_path(snippet), "/", get_snippet(snippet), ".jl"))\")
    $(snippet_suffix(snippet))
    """
    modname = join(rand('A':'Z', 16)) 
    return """
    \n
    module $modname
        try
            $snippet
        catch error
            @warn error
        end
    end
    \n
    """
end

function precompile_snippets(package, snippets) 
    snippet_codes = map(snippet_code, snippets)
    code = join(snippet_codes, ";")

    precompile_path = string("./precompile/", package, "/")
    precompile_file = string(precompile_path, "/precompile.jl")

    mkpath(precompile_path)
    return julia_precompile(code, precompile_file)
end

function get_snippet end
function get_snippets_path end
function get_precompile_path end
function snippet_prefix end
function snippet_suffix end

mkpath("./tmp")

makie_snippets = include("./packages/makie.jl")
plots_snippets = include("./packages/plots.jl")

all_snippets = filter(v -> !isempty(last(v)), reduce(merge, (
    makie_snippets, 
    plots_snippets,
)))

precompile_execution_file = "./precompile_execution.jl"

open(precompile_execution_file, "w") do io
    println(io, "# This file is autogenerated. Do not change.")
    for (package, snippets) in all_snippets
        snippet_codes = map(snippet_code, snippets)
        println(io, join(snippet_codes, ";"))
    end
end